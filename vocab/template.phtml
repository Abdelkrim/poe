<!DOCTYPE html>
<html>
	<head>
        <title>ODRL Vocabulary &amp; Expression</title>
		<meta content="text/html; charset=utf-8" http-equiv="content-type" />
		<meta content="width=device-width,initial-scale=1" name="viewport" />
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
		<script class="remove" src="https://www.w3.org/Tools/respec/respec-w3c-common" defer></script>
		<script class="remove" src="config.js"></script>
	</head>
	<body>
<?php

//	echo $vocab->htmlHeader();
	
	readfile(dirname(__FILE__) . '/parts/abstract.html');
	readfile(dirname(__FILE__) . '/parts/sotd.html');
	readfile(dirname(__FILE__) . '/parts/intro.html');
?>
        
<section id="conformance">
        
     <?php
        readfile(dirname(__FILE__) . '/parts/conformance.html');  
          ?>       
        
</section>
        
<section id="vocab-core">
	<h2>ODRL Core Vocabulary</h2>

      <?php
        readfile(dirname(__FILE__) . '/parts/vocab-core.html');  
          ?>  
<?php
writeGroup('policyConcepts');
writeGroup('policySubClasses');
writeGroup('ruleConcepts');
writeGroup('assetConcepts');
writeGroup('assetRelations');
writeGroup('partyConcepts');
writeGroup('partyRoles');
writeGroup('assetParty');
writeGroup('permissions');
writeGroup('prohibitions');
writeGroup('actionConcepts');
writeGroup('actions');
writeGroup('duties');
writeGroup('constraints');
writeGroup('logicalConstraints');
writeGroup('constraintRelationalOperators');
writeGroup('constraintLogicalOperands');	
writeGroup('conflictConcepts');
?>
    
    
</section>
        
 <section id="vocab-common" class="informative">
	<h2>ODRL Common Vocabulary</h2>

     <?php
        readfile(dirname(__FILE__) . '/parts/vocab-common.html');  
          ?>
    <?php
writeGroup('policySubClassesCommon');
writeGroup('assetRelationsCommon');
writeGroup('partyRolesCommon');
writeGroup('actionsCommon');
writeGroup('constraintLeftOperandCommon');
//writeGroup('constraintOperatorsCommon');
writeGroup('constraintRightOpCommon');
?>
     
</section>
        
<!--			
 <section id="vocab-collective" class="informative">
<h2>Collective Vocabulary</h2>

//     <?php
//        readfile(dirname(__FILE__) . '/parts/vocab-collective.html');  
//          ?>
//    <?php
// writeGroup('collectiveActions');
// ?>
-->
		
			
			

<section id="encodings">
	<h2>Vocabulary Expression</h2>
     <?php
        readfile(dirname(__FILE__) . '/parts/encode.html');
        ?>
    
    <section id="xml" class="informative">
   	<h2>XML</h2>         
        <?php
        readfile(dirname(__FILE__) . '/parts/xml.html');  
          ?>
    </section>
            
   
     
 </section>

        
<section id="privacy-consideration" class="informative">
   	<h2>Privacy Considerations</h2>         
     <?php
        readfile(dirname(__FILE__) . '/parts/privacy-consideration.html');
        ?>
    </section>
        
        
<!-- 
<section class="appendix normative" id="xmlschema">
 <h2>ODRL XML Schema</h2>
      <?php
//        $schema = file_get_contents("ODRL22.xsd");
//        echo '<pre>' . htmlspecialchars($schema, ENT_QUOTES, 'UTF-8');
//        echo '</pre>';
        ?> 
</section>
        
<section class="appendix normative" id="jsonschema">
<h2>ODRL JSON Schema</h2>
       <?php
//        $schema = file_get_contents("ODRL22.json");
//        echo '<pre>' . htmlspecialchars($schema, ENT_QUOTES, 'UTF-8');
//        echo '</pre>';
        ?>
 </section>
 -->
        
<section class="appendix" id="deprecate">
<h2>Deprecated Terms</h2>
 
            <?php
    writeGroupAppendix('deprecatedTerms');
?>
           
</section>
   
<section class="appendix" id="ack">
<h2>Acknowledgements</h2>
 <?php
        readfile(dirname(__FILE__) . '/parts/ack.html');  
          ?>
</section>
        
<section id="cr-exit" class="appendix">
<h3>Candidate Recommendation Exit Criteria</h3>
 <?php
        readfile(dirname(__FILE__) . '/parts/cr-exit.html');  
          ?>
</section>
	
	
        <section class="appendix" id="community">
<h2>Relationship to the W3C ODRL Community Group Reports</h2>
 <?php
        readfile(dirname(__FILE__) . '/parts/community.html');  
          ?>
</section>
        
<section class="appendix" id="changes">
<h2>Changes from Previous Versions</h2>
 <?php
        readfile(dirname(__FILE__) . '/parts/changes.html');  
          ?>
</section>
        

	</body>
</html>

<?php

function printExample($filename, $id, $title)
{
	static $serialisations = array(
		'json' => 'JSON',
		'ttl' => 'Turtle',
		'xml' => 'XML',
		'rdf' => 'RDF/XML',
		'nt' => 'N-Triples',
	);
	
	echo '<section id="' . $id . '">';
	echo '<h3>' . $title . '</h3>';
	
	$basepath = dirname(__FILE__) . '/examples/' . $filename;
	
	@readfile($basepath . '.html');
	
	$versions = array();
	foreach($serialisations as $ext => $name)
	{
		if(file_exists($basepath . '.' . $ext))
		{
			$versions[$ext] = file_get_contents($basepath . '.' . $ext);
		}
	}
	
	echo '<div class="nanotabs">';
	echo '<ul>';
	foreach($versions as $ext => $payload)
	{
			echo '<li><a href="#' . $id . '-' . $ext . '" class="selected">' . $serialisations[$ext] . '</a></li>';
	}
	echo '</ul>';
	echo '</div>';

	$first = true;
	foreach($versions as $ext => $payload)
	{
		echo '<div id="' . $id . '-' . $ext . '" style="display: ' . ($first ? 'block' : 'none') . ';">';
		$first = false;
		echo '<pre class="example highlight ' . $ext . '">' . htmlspecialchars($payload, ENT_QUOTES, 'UTF-8') . '</pre>';
		echo '</div>';
	}
	
	echo '</section>';
}

function writeGroup($groupUri, $name = null)
{
	global $graph, $uri;
	
	if($name === null)
	{
		$name = $groupUri;
		$groupUri = $uri . '#' . $name;
	}
	$members = $graph->allResources($groupUri, 'skos:member');
	$title = $graph->getLiteral($groupUri, 'skos:prefLabel');
	if($title !== null)
	{
		$title = trim($title);
	}
	else
	{
		$title = $name;
	}
    echo '<section id="' . $name . '">';
    echo '<h2>' . $title . '</h2>';
	$path = dirname(__FILE__) . '/parts/' . strtolower($name) . '.html';
	if(file_exists($path))
	{
		readfile($path);
	}
	foreach($members as $term)
	{
		writeTerm($term);
	}
	echo '</section>';
}

function writeTerm($term)
{
	if(!($term instanceof Phpspecgen_Term))
	{
		return;
	}
	$tname = htmlspecialchars($term->localName());
    echo '<section id="term-' . $tname . '">';
    
	echo '<h3>' . htmlspecialchars($term->get('rdfs:label')) . '</h3>';
	$description = '<p>' . htmlspecialchars($term->get('rdfs:comment')) . '</p>';
	$path = dirname(__FILE__) . '/parts/' . strtolower($term->localName()) . '.html';
	if(file_exists($path))
	{
		$description = file_get_contents($path);
	}
	
	$html = "";

	$html .= "<table class='def propdef' >\n";
	$html .= $term->propertyRow("Definition", "skos:definition");
	$html .= $term->propertyRow("Label", "rdfs:label");
	$html .= "  <tr><th>Identifier:</th> <td>".$term->htmlLink()."</td></tr>\n";
	$html .= $term->propertyRow("Comment", "rdfs:comment");
    $html .= $term->propertyRow("Note", "skos:note");
	$html .= $term->propertyRow("Parent class", "rdfs:subClassOf");
	$html .= $term->propertyRow("Disjoint classes", "owl:disjointWith");
	$html .= $term->propertyRow("Parent property", "rdfs:subPropertyOf");
	$html .= $term->propertyRow("Equivalent to", "owl:sameAs");
	$html .= $term->propertyRow("Deprecated by", "ont:deprecatedBy");
	$html .= $term->propertyRow("Deprecates", "^ont:deprecatedBy");
	$html .= $term->propertyRow("Sub-classes", "^rdfs:subClassOf");
	$html .= $term->propertyRow("Sub-properties", "^rdfs:subPropertyOf");
    $html .= $term->propertyRow("Broader terms", "skos:broaderTransitive");
	$html .= $term->propertyRow("Narrower terms", "^skos:broaderTransitive");
    $html .= $term->propertyRow("Included By", "^odrl:includedIn");
    $html .= $term->propertyRow("Included In", "odrl:includedIn");
 
	#$html .= $term->propertyRow("Properties", "^rdfs:domain");

	if ($term instanceof Phpspecgen_Class) {
		$properties = $term->inDomainOfProperties();
		if (count($properties) > 0) {
			$html .= "  <tr><th>Properties:</th> ".
					  "<td>".join(', ', $properties)."</td></tr>\n";
		}
		$properties = $term->inheritedProperties();
		if (count($properties) > 0) {
			$html .= "  <tr><th>Inherited Properties:</th> ".
					  "<td>".join(', ', $properties)."</td></tr>\n";
		}
		$properties = $term->inRangeOfProperties();
		if (count($properties) > 0) {
			$html .= "  <tr><th>In Range Of:</th> ".
					  "<td>".join(', ', $properties)."</td></tr>\n";
		}
	}
	$html .= $term->propertyRow("Domain", "rdfs:domain");
	$html .= $term->propertyRow("Range", "rdfs:range");
	#$html .= $term->propertyRow("In Range Of", "^rdfs:range");
	
	
    $html .= $term->propertyRow('Inverse Of', 'owl:inverseOf');
    $html .= $term->propertyRow('Is Inverse Of', '^owl:inverseOf');
	$html .= $term->propertyRow('Instances', '^rdf:type');
	$html .= $term->propertyRow("See Also", "rdfs:seeAlso");


	if($term instanceof Phpspecgen_Individual || $term instanceof Phpspecgen_Concept)
	{
		$html .= $term->propertyRow('Class', 'rdf:type', array('http://www.w3.org/2004/02/skos/core#Concept', 'http://www.w3.org/2002/07/owl#NamedIndividual'));
	}
	$html .= $term->propertyRow('Concepts', 'skos:hasTopConcept');
	$html .= $term->propertyRow("Equivalent Match", "skos:exactMatch");
    #$html .= $term->propertyRow("Status", "skos:scopeNote");
	#$html .= $term->propertyRow('Concept scheme', '^skos:hasTopConcept');
	$html .= "</table>\n";

	echo $html;

	echo '</section>';
}


function writeGroupAppendix ($groupUri, $name = null)
{
	global $graph, $uri;
	
	if($name === null)
	{
		$name = $groupUri;
		$groupUri = $uri . '#' . $name;
	}
	$members = $graph->allResources($groupUri, 'skos:member');
	$title = $graph->getLiteral($groupUri, 'skos:prefLabel');
	if($title !== null)
	{
		$title = trim($title);
	}
	else
	{
		$title = $name;
	}
    echo '<table class="def propdef" >';
    echo '<tbody>';
    echo '<tr>';
    echo '<th>Label</th>';
    echo '<th>Identifier</th>';
    echo '<th>Deprecated By</th>';
    echo '</tr>';
	
    foreach($members as $term)
	{
		writeTermAppendix($term);
	}
	echo '</tbody>';
    echo '</table>';
}

function writeTermAppendix($term)
{
	if(!($term instanceof Phpspecgen_Term))
	{
		return;
	}
	$tname = htmlspecialchars($term->localName());
    echo '<tr id="term-' . $tname . '">';
	echo '<td>' . htmlspecialchars($term->get('rdfs:label')) . '</td>';
	echo '<td>' .$term->htmlLink(). '</td>';
    echo '<td>';
    if(($term->get('skos:exactMatch')) !== null)
    {
      echo '<a href="' . htmlspecialchars($term->get('skos:exactMatch')) . '"';
      echo '>' . htmlspecialchars($term->get('skos:exactMatch')) . '</a>';
    }
    echo '</td>';
    
	echo '</tr>';
}

